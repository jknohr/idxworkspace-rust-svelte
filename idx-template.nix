# idx-template.nix
# Bootstraps the NeuralUI/Spine workspace structure and generates the main .idx/dev.nix file.
# Includes logic to copy placeholder files and setup scripts for the Rust workspace.

{ pkgs, ... }: {

  # Packages needed ONLY for this bootstrap script (e.g., for 'cp', 'mkdir')
  packages = [ pkgs.coreutils ];

  # The shell script that performs the bootstrap process.
  # It runs in a temporary environment and writes its output to the '$out' directory,
  # which becomes the user's /workspace directory.
  bootstrap = ''
    echo "Starting NeuralUI / Spine workspace bootstrap..."

    # Create root directories in the target workspace ($out)
    echo "Creating directory structure (including spine/crates)..."
    mkdir -p "$out/neuralui"
    # Create spine root first, then subdirs to ensure correct hierarchy if spine/ itself has files
    mkdir -p "$out/spine"
    mkdir -p "$out/spine/crates"
    mkdir -p "$out/spine/scripts"
    mkdir -p "$out/spine/deps"    # Pre-create the deps dir for clarity
    mkdir -p "$out/.idx"

    # --- Copy placeholder files/dirs from the template repo ---
    # '${./.}' refers to the directory where this idx-template.nix file lives in the template repo.
    # We copy contents selectively. Using '2>/dev/null || true' makes copy commands non-fatal if source doesn't exist.
    echo "Copying placeholder files, Cargo.toml, and setup scripts..."
    # Copy frontend placeholders
    cp -a "${./.}/neuralui/." "$out/neuralui/" 2>/dev/null || true
    # Copy backend root contents (like Cargo.toml) and subdirs (like scripts/ and crates/)
    # Using 'shopt -s dotglob' includes hidden files/dirs if any; 'shopt -u dotglob' turns it off after.
    shopt -s dotglob
    cp -a "${./.}/spine/."* "$out/spine/" 2>/dev/null || true
    shopt -u dotglob
    # Specifically ensure crates structure is copied if spine/. didn't catch it fully or was empty
    cp -a "${./.}/spine/crates/." "$out/spine/crates/" 2>/dev/null || true
    # Copy top-level README.md
    cp -a "${./.}/README.md" "$out/README.md" 2>/dev/null || true
    # Copy workspace icon
    cp -a "${./.}/.idx/icon.png" "$out/.idx/icon.png" 2>/dev/null || true

    # --- Generate the main .idx/dev.nix file ---
    # This heredoc writes the Nix configuration for the actual workspace environment.
    # Using 'EOF' (quoted) prevents shell expansion of Nix's ${...} syntax.
    echo "Generating .idx/dev.nix environment configuration..."
    cat <<'EOF' > "$out/.idx/dev.nix"
# .idx/dev.nix
# Defines the development environment for the NeuralUI/Spine workspace.
# Generated by the idx-template.nix bootstrap script. Modify as needed.

{ pkgs, lib, ... }:

let
  # --- Define specific versions/toolchains ---
  nodeJs = pkgs.nodejs-21_x; # Node.js v21 as requested
  llvmVersion = "17"; # LLVM/Clang version
  llvmPkgs = pkgs."llvmPackages_${llvmVersion}";

  # Stable Rust toolchain with source for rust-analyzer
  rustToolchain = pkgs.rust-bin.stable.latest.default.override {
    extensions = [ "rust-src" ];
  };

in {
  # Nix Packages channel
  channel = "stable-23.11"; # Or "stable-24.05", etc.

  # --- Nix Packages available in the environment PATH ---
  packages = [
    # Core Dev & Build Tools
    pkgs.git pkgs.gcc pkgs.gdb pkgs.cmake pkgs.pkg-config pkgs.make pkgs.ninja pkgs.protobuf
    # Frontend (NeuralUI)
    nodeJs pkgs.nodePackages.npm
    # Backend (Spine - Rust Workspace / C++ Deps)
    (llvmPkgs.llvm.override { enableManpages = false; }) llvmPkgs.libclang
    rustToolchain pkgs.lld pkgs.openssl.dev pkgs.opus.dev # Opus dev files added
    # AI/ML Runtime & Scripting
    pkgs.wasmedge pkgs.powershell pkgs.python3
    # Utilities
    pkgs.coreutils pkgs.curl pkgs.wget pkgs.gnutar pkgs.unzip pkgs.jq pkgs.htop pkgs.ripgrep pkgs.fd
  ];

  # --- Environment Variables ---
  environment.variables = {
    NODE_ENV = "development";
    # LIBCLANG_PATH = "${llvmPkgs.libclang.lib}/lib"; # Usually not needed

    # --- PLACEHOLDERS for Manually Installed Libraries ---
    # Uncomment/set these AFTER running setup scripts & rebuilding environment!
    # LIBTORCH_ROOT = "/workspace/spine/deps/libtorch";
    # TENSORFLOW_ROOT = "/workspace/spine/deps/tensorflow";
    # GGML_DIR = "/workspace/spine/deps/ggml";
  };

  # --- Shell Hook (runs on shell start) ---
  environment.shellHook = ''
    echo "Welcome to the NeuralUI/Spine IDX Environment!"
    # --- PLACEHOLDERS for Manually Installed Libraries ---
    # Uncomment/set these AFTER running setup scripts & rebuilding environment!
    # export LD_LIBRARY_PATH="/workspace/spine/deps/libtorch/lib:$LD_LIBRARY_PATH"
    # export LD_LIBRARY_PATH="/workspace/spine/deps/tensorflow/lib:$LD_LIBRARY_PATH"
    # export LD_LIBRARY_PATH="/workspace/spine/deps/ggml/lib:$LD_LIBRARY_PATH" # Adjust path as needed
  '';

  # --- Recommended VS Code Extensions ---
  idx.extensions = [
    # General
    "github.copilot", "ms-vscode.powershell", "esbenp.prettier-vscode",
    # C/C++ (for deps or mixed code)
    "vscode.cpptools", "ms-vscode.cmake-tools", "cheshirekow.cmake-format",
    # Rust
    "rust-lang.rust-analyzer", "tamasfe.even-better-toml", "serayuzgur.crates",
    # Node.js / Frontend
    "dbaeumer.vscode-eslint"
    # Add framework-specific frontend extensions if needed
  ];

  # --- Workspace Lifecycle Hooks ---
  idx.workspace = {
    # Runs ONCE when the workspace is first created.
    onCreate = {
      # 1. Install frontend dependencies
      install-frontend-deps = "echo 'Installing frontend dependencies...' && cd neuralui && npm install && cd ..";

      # 2. Run setup scripts for complex backend dependencies
      info-backend-deps = ''
        echo ""
        echo "---------------------------------------------------------"
        echo " Running Backend AI/ML Dependency Setup Scripts... "
        echo " Using PowerShell scripts from /workspace/spine/scripts/ "
        echo "---------------------------------------------------------"
        echo "This will attempt to download/build LibTorch, TensorFlow C API, and GGML into '/workspace/spine/deps/'."
        echo "Ensure the scripts are modified for Linux/IDX environment."
        echo "Monitor the output below for success or errors."
        echo "---------------------------------------------------------"
      '';
      # Execute the copied setup scripts (ensure they exist in your template repo at spine/scripts/)
      setup-libtorch = "pwsh -NoProfile -File /workspace/spine/scripts/setup_libtorch.ps1";
      setup-tensorflow = "pwsh -NoProfile -File /workspace/spine/scripts/setup_tensorflow.ps1";
      setup-ggml = "pwsh -NoProfile -File /workspace/spine/scripts/setup_ggml.ps1";

      # 3. Provide clear instructions for the necessary manual step
      final-instructions = ''
        echo ""
        echo "---------------------------------------------------------"
        echo " ACTION REQUIRED: Finalize Backend Setup "
        echo "---------------------------------------------------------"
        echo "1. Check script output above for errors."
        echo "2. Verify libraries exist in '/workspace/spine/deps/'."
        echo "3. **Edit this file (.idx/dev.nix):**"
        echo "   - Uncomment/set *_ROOT variables under 'environment.variables'."
        echo "   - Uncomment/set LD_LIBRARY_PATH under 'environment.shellHook'."
        echo "4. **Rebuild the Environment:** Cmd+Shift+P -> 'IDX: Rebuild Environment'"
        echo "---------------------------------------------------------"
        echo ""
      '';

      # 4. Files to open automatically on first workspace creation
      default.openFiles = [
        ".idx/dev.nix",             # Open this first for editing env vars
        "README.md",
        "neuralui/package.json",
        "spine/Cargo.toml",         # Open the main workspace TOML
        # Optional: Open a key source file from one of the crates
        # "spine/crates/spine-core/src/lib.rs", # Adjust crate name/file
      ];
    };

    # Runs EVERY time the workspace starts.
    onStart = {
      check-backend-vars = ''
        if [[ -z "$LIBTORCH_ROOT" && -e "/workspace/spine/deps/libtorch" ]]; then
          # Check if var is empty but dir exists (simple heuristic)
          echo "Warning: LibTorch seems installed in deps/, but LIBTORCH_ROOT is not set in .idx/dev.nix. Rebuild after setting."
        fi
        # Add similar checks for TENSORFLOW_ROOT, GGML_DIR if desired
      '';
    };
  };

  # --- IDX Previews Configuration ---
  idx.previews = {
    enable = true;
    previews = [
      {
        id = "neuralui-dev"; label = "NeuralUI Dev";
        command = ["npm", "run", "dev", "--", "--port", "$PORT"];
        manager = "web"; cwd = "neuralui";
      }
      # Preview for Spine backend (Rust workspace)
      {
        id = "spine-server"; label = "Spine Backend";
        # 'cargo run' will execute the default binary or example from workspace root
        command = ["cargo", "run"];
        manager = "process";
        cwd = "spine"; # Run cargo from the workspace root directory
      }
    ];
  };

  # --- Optional Services ---
  # services.postgres = { enable = true; extensions = ["pgvector"]; };
  # services.docker = { enable = true; }; # If you need docker CLI later

}
EOF
    # End of heredoc for .idx/dev.nix

    # Ensure correct permissions for the new workspace files
    chmod -R +w "$out"

    echo "Bootstrap complete. Workspace structure created in '$out'."
    echo "Environment defined in '$out/.idx/dev.nix'."
    echo "Remember to complete the manual backend setup steps detailed above."
  ''; # End of bootstrap script string
}
